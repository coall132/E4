services:
  api:
    build:
      context: .
      dockerfile: ./API/Dockerfile
      target: prod
    image: ${DOCKERHUB_USERNAME:-local}/restaurant-api2:${IMAGE_TAG:-dev}
    ports: ["8002:8000"]
    environment:
      TURNSTILE_SITEKEY: ${TURNSTILE_SITEKEY}
      TURNSTILE_SECRET: ${TURNSTILE_SECRET}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_BACKEND_STORE_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      MLFLOW_ARTIFACTS_DESTINATION: file:///mlruns2
      MLFLOW_EXPERIMENT: restaurant-api
      PROMETHEUS_MULTIPROC_DIR: /tmp
      REDIS_URL: redis://redis:6379/0
      SIGNUP_UNIQUE_IPS_WINDOW_SEC: "300"
      SIGNUP_PATH_REGEX: "^/(users|register)$"
      METRICS_LEADER: "1"
      API_STATIC_KEY: ${API_STATIC_KEY}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./logs:/logs
    command: ["sh","-lc",
      "uvicorn API.main:app \
      --host 0.0.0.0 --port 8000 \
      --proxy-headers --forwarded-allow-ips='*' \
      --access-log 2>&1 | tee -a /logs/api/access.log"
      ]
    depends_on:
      - redis
    networks:
      - data_network


  mlflow:
    build:
      context: .
      dockerfile: ./mlflow.Dockerfile
    image: ${DOCKERHUB_USERNAME:-local}/restaurant-mlflow2:${IMAGE_TAG:-dev}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      MLFLOW_BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI}
      MLFLOW_ARTIFACTS_DESTINATION: ${MLFLOW_ARTIFACTS_DESTINATION}
      MLFLOW_SERVE_ARTIFACTS: "true"
      MPLCONFIGDIR: /tmp
    volumes:
      - mlflow_artifacts2:/mlruns2
    ports: ["5002:5000"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if 200<=urllib.request.urlopen('http://127.0.0.1:5000/', timeout=3).getcode()<400 else 1)"]
    restart: unless-stopped
    networks: [data_network]

  monitor:
    build:
      context: .
      dockerfile: ./monitor.Dockerfile
    image: ${DOCKERHUB_USERNAME:-local}/restaurant-monitor2:${IMAGE_TAG:-dev}
    working_dir: /app/API
    environment:
      PYTHONUNBUFFERED: "1"
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_EXPERIMENT: restaurant-api
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      LAT_AVG_N: "10"
      LAT_THRESHOLD_MS: "10000"
      RATING_AVG_N: "10"
      RATING_MIN_THRESHOLD: "1.0"
      CHECK_INTERVAL_SEC: "5"
      ALERT_COOLDOWN_SEC: "600"
      NO_PROXY: "mlflow,localhost,127.0.0.1"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
    depends_on:
      mlflow:
        condition: service_started
    restart: unless-stopped
    networks: [data_network]
  
  redis:
      build:
        context: .    
        dockerfile : ./redis.Dockerfile  
      image: ${DOCKERHUB_USERNAME:-local}/restaurant-redis:${IMAGE_TAG:-dev}
      restart: unless-stopped
      networks: [data_network]

  fail2ban:
    build:
      context: ./fail2ban
      dockerfile: fail2ban.Dockerfile
    image: ${DOCKERHUB_USERNAME:-local}/restaurant-fail2ban:${IMAGE_TAG:-dev}
    depends_on:
      - redis
    environment:
      - TZ=Europe/Paris
      - F2B_LOG_TARGET=STDOUT
      - F2B_DB_PURGE_AGE=7d
    networks: [data_network]
    volumes:
      - ./logs:/logs:ro
    restart: unless-stopped
    
networks:
  data_network:
    external: true

volumes:
  mlflow_artifacts2:
