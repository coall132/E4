services:
  api:
    build:
      context: .
      dockerfile: ./API/Dockerfile
      target: prod
    container_name: api_ia
    ports:
      - "8001:8000"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_EXPERIMENT: restaurant-api
    networks:
      - data_network

  # Crée le bucket s’il n’existe pas
  minio-init:
    image: minio/mc
    depends_on: []
    entrypoint: >
      sh -lc "
        until (mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}); do echo 'waiting for minio...'; sleep 2; done;
        mc mb -p myminio/mlflow-artifacts || true;
        mc ls myminio;
      "
    networks:
      - data_network

  mlflow:
    image: python:3.11-slim
    container_name: mlflow
    environment:
      # --- tracking store (Postgres)
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      # --- artifacts (MinIO/S3)
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # --- mlflow server config via ENV (utilisées par mlflow.server:app)
      MLFLOW_BACKEND_STORE_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      MLFLOW_ARTIFACTS_DESTINATION: s3://mlflow-artifacts/
      MLFLOW_SERVE_ARTIFACTS: "true"
      # (optionnel) éviter que matplotlib écrive dans $HOME
      MPLCONFIGDIR: /tmp
    command: >
      bash -lc "
        set -euo pipefail
        apt-get update &&
        apt-get install -y --no-install-recommends postgresql-client curl &&
        rm -rf /var/lib/apt/lists/* &&
        pip install --no-cache-dir 'mlflow==2.14.0' gunicorn psycopg2-binary &&
        echo 'Waiting for Postgres...' &&
        until psql 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable' -c 'SELECT 1' >/dev/null 2>&1; do
          echo 'waiting for postgres...'; sleep 2;
        done &&
        echo 'Waiting for MinIO...' &&
        until curl -fsS http://minio:9000/minio/health/ready >/dev/null; do
          echo 'waiting for minio...'; sleep 2;
        done &&
        # >>> démarre directement gunicorn sur l'app WSGI de MLflow
        exec gunicorn --bind 0.0.0.0:5000 --workers 4 mlflow.server:app
      "
    ports:
      - "5001:5000"
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - |
          import sys, urllib.request
          try:
              with urllib.request.urlopen('http://127.0.0.1:5000/', timeout=3) as r:
                  sys.exit(0 if 200 <= r.getcode() < 400 else 1)
          except Exception:
              sys.exit(1)
    restart: unless-stopped
    networks:
      - data_network


  monitor:
    image: python:3.11-slim
    working_dir: /app/API
    command: >
      bash -lc "
        pip install --no-cache-dir 'mlflow==2.14.0' requests numpy &&
        echo 'Waiting for MLflow root...' &&
        until python -c \"import sys,urllib.request;sys.exit(0 if 200<=urllib.request.urlopen(sys.argv[1],timeout=3).status<400 else 1)\" http://mlflow:5000/; do
          echo 'waiting root...'; sleep 2;
        done &&
        python monitor/monitor_ia.py
      "
    volumes:
      - ./API/monitor:/app/API/monitor:ro
    environment:
      PYTHONUNBUFFERED: "1"
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_EXPERIMENT: restaurant-api
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      LAT_AVG_N: "10"
      LAT_THRESHOLD_MS: "10000"
      RATING_AVG_N: "10"
      RATING_MIN_THRESHOLD: "1.0"
      CHECK_INTERVAL_SEC: "5"
      ALERT_COOLDOWN_SEC: "600"
      NO_PROXY: "mlflow,localhost,127.0.0.1"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
    depends_on:
      mlflow:
        condition: service_started
    restart: unless-stopped
    networks:
      - data_network
      
networks:
  data_network:
    external: true
