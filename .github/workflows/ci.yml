name: ci

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests-api:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-api-${{ runner.os }}-${{ hashFiles('API/requirements_dev.txt') }}

      - name: Install dev deps (API)
        working-directory: API
        run: pip install -r requirements_dev.txt

      - name: Run tests (API)
        working-directory: API
        env:
          DISABLE_WARMUP: "1"
          API_STATIC_KEY: ${{ secrets.API_STATIC_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

  build-and-push:
    needs: tests-api
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ---------- API ----------
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./API/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api2:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api2:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api2:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api2:buildcache,mode=max

      # ---------- MLflow (suffix 2 comme dans ton compose) ----------
      - name: Build & push MLflow image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./mlflow.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow2:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow2:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow2:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow2:buildcache,mode=max

      # ---------- Monitor (suffix 2 comme dans ton compose) ----------
      - name: Build & push Monitor image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./monitor.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor2:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor2:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor2:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor2:buildcache,mode=max

      # ---------- Redis ----------
      # Si tu as mis un Dockerfile dédié (recommandé) dans ./redis/Dockerfile
      - name: Build & push Redis image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./redis.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-redis:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-redis:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-redis:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-redis:buildcache,mode=max

      # ---------- fail2ban ----------
      - name: Build & push Fail2ban image
        uses: docker/build-push-action@v6
        with:
          context: ./fail2ban
          file: ./fail2ban/fail2ban.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-fail2ban:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-fail2ban:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-fail2ban:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-fail2ban:buildcache,mode=max

  deploy-local:
    needs: build-and-push
    runs-on: [self-hosted, local, windows]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync compose to deploy folder (cmd)
        shell: cmd
        run: |
          if not exist "%USERPROFILE%\app-e4" mkdir "%USERPROFILE%\app-e4"
          copy /Y "%GITHUB_WORKSPACE%\docker-compose.yml" "%USERPROFILE%\app\docker-compose.yml"

      - name: Déployer localement (pull & up)
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        shell: cmd
        run: |
          cd /d "%USERPROFILE%\app-e4"
          echo %DOCKERHUB_TOKEN% | docker login -u %DOCKERHUB_USERNAME% --password-stdin 
          for /f "tokens=*" %%i in ('docker network ls --format "{{.Name}}" ^| findstr /r "^data_network$"') do set found=1
          if not defined found docker network create data_network
          docker compose --env-file .env pull
          docker compose --env-file .env up -d
          docker image prune -f
          docker compose ps